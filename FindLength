//https://www.geeksforgeeks.org/find-length-of-a-linked-list-iterative-and-recursive/

public class LinkedList {
	Node head;
	
	static class Node{
		int data;
		Node next;
		
		Node(int data){
			this.data = data;
		}
	}
	
	public void print(Node head) {
		
		if(head == null) {
			return;
		}
		Node temp = head;
		while(temp!=null) {
			System.out.print(temp.data+"-->");
			temp = temp.next;
		}
		System.out.print("null");
	}
	
	public int findLength_Iteratively(Node head) {
		if(head == null) {
			return 0;
		}
		
		Node temp = head;
		int count = 0;
		while(temp!=null) {
			count++;
			temp = temp.next;
		}
		return count;
	}
	
	public int findLength_Recursively(Node head) {
		if(head == null) {
			return 0;
		}
		Node temp = head;
		return 1+findLength_Recurrsively(temp.next);
	}
	
	public static void main(String[] args) {
		LinkedList list = new LinkedList();
		list.head = new Node(1);
		 Node two = new Node(2);
		 Node three = new Node(3);
		 Node four = new Node(4);
		 
		 list.head.next = two;
		 two.next = three;
		 three.next = four;
		 
		 list.print(list.head);
		 
		 System.out.println("\n"+list.findLength_Iteratively(list.head));
		 
		 
		 System.out.println(list.findLength_Recurrsively(list.head));
	}
}
